dados <- read.csv("Dados/Pokemon_full.csv")
head(dados)
tail(dados)
head(dados)### olha as primeiras linhas
tail(dados) ### olha as ultimas linhas
library("tidyverse")
tail(dados, 12) ### olha as ultimas linhas
names(dados)
select(dados, name, hp)
filter(dados, attack>50)
filter(dados, attack < 50)
setwd("C:/Users/inaci/Desktop/POS -GRADUAÇÃO DOUTORADO/Disciplinas/Modelagem e ferramentas computacionais/R/R")
view(dados)
mutate(dados, x = attack+speed)
mutate(dados, attack - attack/2)
dados %>%
select(nome, hp, attack, speed) %>%
filter(attack < 50)
dados %>%
select(name, hp, attack, speed) %>%
filter(attack < 50)
dados %>%
select(name, hp, attack, speed) %>%
filter(attack < 50) %>%
mutate(x = attack+speed)
x %>%
gsub("Th", "th", x)
x = c("Thomas", "Fernando", "Thais")
x %>%
gsub("Th", "th", x)
x = c("Thomas", "Fernando", "Thais")
x %>%
gsub("Th", "th", x)
x = c("Thomas", "Fernando", "Thais")
x %>%
gsub("Th", "th", .)
dados <- read.csv("Dados/Pokemon_full.csv")
head(dados)### olha as primeiras linhas
## Carregar o pacote
library("tidyverse")
select(dados, name, hp, speed, attack)
mutate(dados, x = attack+speed) #cria nova variável
mutate(dados, attack - attack/2)
mutate(dados, IMC = weight/(height*height))
dados %>%
select(name, hp, attack, speed) %>%
filter(attack < 50) %>%
mutate(x = attack+speed)
##modo um por um, não tão viável como o acima
df <- select(dados, name, hp, attack, speed)
df <- filter(df, attack<50)
df <- mutate(df, df, x = attack+speed)
df
dados %>% # o pipe pega o que esta a esquerda dele e coloca como argumento da função seguinte
select(name, hp, attack, speed) %>%
filter(attack < 50) %>%
mutate(x = attack+speed)
#gsub modifica strings, caracteres
x = c("Thomas", "Fernando", "Thais")
x %>%
gsub("Th", "th", .) ## Substituir
dados %>% # o pipe pega o que esta a esquerda dele e coloca como o primeiro argumento da função seguinte
select(name, hp, attack, speed) %>%
filter(attack < 50) %>%
mutate(x = attack+speed) %>%
ggplot()+
geom_density(aes(x = IMC))
dados %>% # o pipe pega o que esta a esquerda dele e coloca como o primeiro argumento da função seguinte
filter(height > 10) %>%
select(name, height, speed) %>%
mutate(IMC = weight/(height*height)) %>%
ggplot()+
geom_density(aes(x = IMC))
dados %>% # o pipe pega o que esta a esquerda dele e coloca como o primeiro argumento da função seguinte
filter(height > 10) %>%
select(name, height, weight) %>%
mutate(IMC = weight/(height*height)) %>%
ggplot()+
geom_density(aes(x = IMC))
head(dados)
dados %>% head
#comando interessante
glimpse(dados)
#comando interessante
glimpse(dados)
str(dados)
dados %>% pull(IMC)
dados <- mutate(dados, IMC = weight/(height*height))
dados %>% pull(IMC)
dados %>%
mutate(media = mean(IMC))
mean(c(1,2,3,4,5,6,7,8,9,10))
dados %>%
summarise(media = mean(IMC))
dados %>%
group_by(type)
summarise(media = mean(IMC)) #summarise resume os dados pra nós
dados %>%
group_by(type) %>%
summarise(media = mean(IMC)) #summarise resume os dados pra nós
dados %>%
group_by(type) %>%
summarise(media = mean(IMC), desvio = sd(IMC)) #summarise resume os dados pra nós
dados %>%
group_by(type) %>%
summarise(media = mean(IMC), desvio = sd(IMC)) #summarise resume os dados pra nós
dados %>%
group_by(type) %>%
mutate(media = mean(IMC)) %>% View
dados %>%
group_by(type) %>%
mutate(media = mean(IMC)) %>%
filter(IMC > media) %>% View
dados %>%
group_by(type) %>%
mutate(media = mean(IMC)) %>%
filter(IMC > media) %>% View
dados %>%
group_by(type) %>%
mutate(media = mean(IMC)) %>%
filter(IMC > media) %>% View
df <- dados %>%
group_by(type) %>%
mutate(media = mean(IMC))
df
df %>%
ungroup() %>%
mutate(media2 = mean(IMC))
view(df)
df %>%
ungroup() %>%
mutate(media2 = mean(IMC)) %>% View
grep("saur", dados$name)
grepl("saur", dados$name) #mostra verdadeiro e falso pra todos os dados
# busca padrões
# aceita Regular Expression (ReGex)
grep("saur|fly", dados$name) #mostra a posição onde está
grepl("saur|fly", dados$name) #mostra verdadeiro e falso pra todos os dados
grep("[Ss]aur", dados$name)
x
grep("Th[oa]", x)
n <- c("097.765.986-90", "123.765.98-37")
grepl("\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2}")
grepl("\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2}", n)
dados %>%
filter(attack>50)
dados$attack>50
dados %>%
filter(grepl("saur", name))
dados %>%
filter(grepl("saur|fly", name))
dados %>%
filter(grepl("saur|fly", name), attack>50)
dados %>%
filter(grepl("saur|fly", name), attack>50, type!="grass")
"saur" == "ivysaur"
grepl("saur", "ivysaur")
# bind row
df1 <-dados %>%
filter(attack > 70)
df2 <- dados %>%
filter(attack <= 70)
rbind(df1,df2)
df1 <- dados %>%
select(attack, speed, weight) %>%
filter(attack>70)
df1 <- dados %>% head(100)
df2 <- dados %>% tail(100)
cbind(df1, df2) %>% names
bind_cols(df1,df2)
bind_cols(df1,df2, name_repair = "minimal")
bind_cols(df1,df2, name_repair = "unique")
bind_cols(df1,df2, name_repair = "check_unique")
df_resumo <- dados %>%
group_by(type) %>%
summarise(media = mean(IMC), desvio = sd(IMC))
left_join(dados, df_resumo, by = c(type)) %>% View
left_join(dados, df_resumo, by = c('type')) %>% View
df_resumo_mis <-  df_resumo %>% filter(type != "grass")
left_join(dados, df_resumo_mis, by = c("type")) %>% View
right_join(dados, df_resumo_mis, by = c("type")) %>% View
df_resumo_mis$type[5] = "thomas"
setwd("C:/Users/inaci/Desktop/POS -GRADUAÇÃO DOUTORADO/Disciplinas/Modelagem e ferramentas computacionais/FCM2025")
getwd()
setwd("C:/Users/inaci/Desktop/POS -GRADUAÇÃO DOUTORADO/Disciplinas/Modelagem e ferramentas computacionais/FCM2025")
getwd()
## Carregar pacotes
library(pacman)
p_load("tidyverse")
dados <- datasets::iris
dados(head, 20)
head(dados, 20)
tail(dados)
names(dados)
# Selecionar colunas
select(dados, "Sepal.Lenght")
# Selecionar colunas
select(dados, "Sepal.Length")
# Renomear os dados
dados_renomeados <- dados %>%
rename(
comprimento_sepala = "Sepal.Lenght",
largura_sepala = "Sepal.Width",
comprimento_petala = "Petal.Width",
largura_petala = "Petal.Width",
especies = "Species"
)
# Renomear os dados
dados_renomeados <- dados %>%
rename(
comprimento_sepala = "Sepal.Length",
largura_sepala = "Sepal.Width",
comprimento_petala = "Petal.Length",
largura_petala = "Petal.Width",
especies = "Species"
)
names(dados_renomeados)
select(dados_renomeados, "comprimento_sepala")
# Filtrar colunas (seleciono linhas)
filter(dados, Species = "virginica")
# Filtrar colunas (seleciono linhas)
filter(dados, Species == "virginica")
# Filtrar colunas (seleciono linhas)
filter(dados, Species == "virginica", Petal.Length > 6.0)
# Filtrar colunas (seleciono linhas)
filter(dados, Species == "virginica")
filter(dados, Species == "virginica", Petal.Length > 6.0)
# Operações
mutate(dados, x = Sepal.Length * Sepal.Width)
# Operações
mutate(dados, x = Sepal.Length * Sepal.Width, y = Petal.Length * Petal. Width)
# Operações
mutate(dados, x = Sepal.Length * Sepal.Width, y = Petal.Length * Petal.Width)
dados_2 <- dados %>% mutate(dados, x = Sepal.Length * Sepal.Width, y = Petal.Length * Petal.Width)
dados_2
str(dados_2)
df_1 <- dados_2 %>% select(x)
df_1
df2_ <- dados_2 %>% select(y)
glimpse(dados)
summary(dados)
str(dados)
df_1 <- dados_2 %>% select(x, Species)
df_1
df2_ <- dados_2 %>% select(y, Species)
df_2
df2_ <- dados_2 %>% select(y, Species)
df_2
df_2 <- dados_2 %>% select(y, Species)
df_2
df_1 <- df_1 %>% group_by(Species) %>% mutate(media = mean(x))
df_1
dados_2 %>% group_by(Species) %>% summarise(mean(Petal.Length)) %>% View
# busca padrões
# aceita Regular Expression (ReGex)
grep("osa", dados$Species) #mostra a posição onde está
grepl("set|ver", dados$name) #mostra verdadeiro e falso pra todos os dados
grepl("set|ver", dados$Species) #mostra verdadeiro e falso pra todos os dados
# bind row
df3 <- df_1 %>%
filter(x > 6)
df3
# bind row
df3 <- df_1 %>%
filter(x > 18)
df3
# bind row
df3 <- dados_2 %>%
filter(Species = "virginica")
# bind row
df3 <- dados_2 %>%
filter(Species == "virginica")
df3
# bind row
df3 <- dados %>%
filter(Species == "virginica")
df3
df4 <- dados %>%
filter(Species == "setosa")
df4
rbind(df3,df4) #juntar as linhas
df5 <- dados %>%
select(Petal.Length, Petal.Width)
df5
df5 <- dados %>%
select(Petal.Length, Petal.Width, Species)
df5
df6 <- dados %>%
select(Sepal.Length, Sepal.Width, Species)
df6
rbind(df1, df2) # juntar linhas - nao aceita dimensoes e nomes diferentes
rbind(df5, df6) # juntar linhas - nao aceita dimensoes e nomes diferentes
df5 <- dados %>%
select(Petal.Length, Petal.Width, Species)
df5
df6 <- dados %>%
select(Sepal.Length, Sepal.Width, Species)
df6
rbind(df5, df6) # juntar linhas - nao aceita dimensoes e nomes diferentes
bind_rows(df1, df2) # juntar linhas - completa se não bater
bind_rows(df5, df6) # juntar linhas - completa se não bater
df7 <- dados %>% head(75)
df8 <- dados %>% tail(75)
cbind(df7, df8) %>% Species
cbind(df7, df8)
bind_cols(df7,df8)
bind_cols(df7,df8, name_repair = "unique")
bind_cols(df7,df8, name_repair = "check_unique")
left_join(dados, df_resumo, by = c('type')) %>% View
left_join(df7, df8, by = c('type')) %>% View
df7 <- dados %>% head(75)
df8 <- dados %>% tail(75)
left_join(df7, df8, by = c('type')) %>% View
left_join(df7, df8, by = c('Species')) %>% View
right_join(df7, df8, by = c("Species")) %>% View
left_join(df7, df8, by = c('Species')) %>% View
full_join(df5, df6, by = c("Species")) %>% View #Mantem todo mundo
inner_join(df5, df6, by = c("Species")) %>% View #Joga fora tudo que não bate
